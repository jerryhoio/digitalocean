// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/digitalocean/droplets.proto

/*
Package droplets is a generated protocol buffer package.

It is generated from these files:
	proto/digitalocean/droplets.proto

It has these top-level messages:
	Image
	Region
	Size
	BackupWindow
	NetworkV4
	NetworkV6
	Networks
	Kernel
	Droplet
	ListRequest
	ListResponse
	GetRequest
	GetResponse
	CreateRequest
	CreateResponse
	DeleteRequest
	DeleteResponse
*/
package droplets

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Droplets service

type DropletsService interface {
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type dropletsService struct {
	c    client.Client
	name string
}

func NewDropletsService(name string, c client.Client) DropletsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "droplets"
	}
	return &dropletsService{
		c:    c,
		name: name,
	}
}

func (c *dropletsService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Droplets.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropletsService) Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.name, "Droplets.Get", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropletsService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "Droplets.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropletsService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Droplets.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Droplets service

type DropletsHandler interface {
	List(context.Context, *ListRequest, *ListResponse) error
	Get(context.Context, *GetRequest, *GetResponse) error
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterDropletsHandler(s server.Server, hdlr DropletsHandler, opts ...server.HandlerOption) error {
	type droplets interface {
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		Get(ctx context.Context, in *GetRequest, out *GetResponse) error
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
	}
	type Droplets struct {
		droplets
	}
	h := &dropletsHandler{hdlr}
	return s.Handle(s.NewHandler(&Droplets{h}, opts...))
}

type dropletsHandler struct {
	DropletsHandler
}

func (h *dropletsHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.DropletsHandler.List(ctx, in, out)
}

func (h *dropletsHandler) Get(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.DropletsHandler.Get(ctx, in, out)
}

func (h *dropletsHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.DropletsHandler.Create(ctx, in, out)
}

func (h *dropletsHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.DropletsHandler.Delete(ctx, in, out)
}
